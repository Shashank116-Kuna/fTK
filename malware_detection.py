"""
Malware Detection Script
Uses pattern matching and ML for malware detection
"""

import os
import pefile
import yara
import hashlib
from typing import Dict, List

class MalwareDetector:
    """Detect potential malware using multiple techniques"""

    SUSPICIOUS_EXTENSIONS = ['.exe', '.dll', '.scr', '.bat', '.cmd', '.ps1', '.vbs', '.js']
    SUSPICIOUS_STRINGS = ['cmd.exe', 'powershell', 'regsvr32', 'rundll32']

    def __init__(self, file_path: str):
        self.file_path = file_path
        self.results = {
            'file_name': os.path.basename(file_path),
            'file_size': os.path.getsize(file_path),
            'is_suspicious': False,
            'indicators': []
        }

    def check_extension(self) -> bool:
        """Check if file has suspicious extension"""
        ext = os.path.splitext(self.file_path)[1].lower()
        if ext in self.SUSPICIOUS_EXTENSIONS:
            self.results['indicators'].append(f"Suspicious extension: {ext}")
            return True
        return False

    def check_file_size(self) -> bool:
        """Check for unusual file sizes"""
        size = self.results['file_size']
        # Suspiciously small executables
        if size < 1024 and os.path.splitext(self.file_path)[1] == '.exe':
            self.results['indicators'].append("Unusually small executable")
            return True
        return False

    def calculate_entropy(self) -> float:
        """Calculate Shannon entropy (high entropy may indicate encryption/packing)"""
        with open(self.file_path, 'rb') as f:
            data = f.read()

        if not data:
            return 0.0

        entropy = 0.0
        for x in range(256):
            p_x = float(data.count(bytes([x]))) / len(data)
            if p_x > 0:
                entropy += - p_x * (p_x).bit_length()

        # High entropy (> 7.0) often indicates packed/encrypted malware
        if entropy > 7.0:
            self.results['indicators'].append(f"High entropy: {entropy:.2f} (possible packing)")
            return True

        return entropy

    def analyze_pe_header(self) -> Dict:
        """Analyze PE file headers for anomalies"""
        try:
            pe = pefile.PE(self.file_path)

            analysis = {
                'compile_time': pe.FILE_HEADER.TimeDateStamp,
                'sections': len(pe.sections),
                'imports': len(pe.DIRECTORY_ENTRY_IMPORT) if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT') else 0
            }

            # Check for suspicious section names
            suspicious_sections = []
            for section in pe.sections:
                name = section.Name.decode().strip('\x00')
                if name not in ['.text', '.data', '.rdata', '.rsrc', '.reloc']:
                    suspicious_sections.append(name)

            if suspicious_sections:
                self.results['indicators'].append(f"Suspicious sections: {suspicious_sections}")

            return analysis

        except Exception as e:
            return {'error': str(e)}

    def scan_with_yara(self, rules_file: str) -> List[str]:
        """Scan file with YARA rules"""
        try:
            rules = yara.compile(filepath=rules_file)
            matches = rules.match(self.file_path)

            if matches:
                for match in matches:
                    self.results['indicators'].append(f"YARA match: {match.rule}")

            return [match.rule for match in matches]
        except Exception as e:
            return []

    def analyze(self, yara_rules: str = None) -> Dict:
        """Perform complete malware analysis"""
        self.check_extension()
        self.check_file_size()
        self.calculate_entropy()

        # PE analysis for executables
        if self.file_path.endswith('.exe') or self.file_path.endswith('.dll'):
            self.results['pe_analysis'] = self.analyze_pe_header()

        # YARA scanning
        if yara_rules:
            self.results['yara_matches'] = self.scan_with_yara(yara_rules)

        self.results['is_suspicious'] = len(self.results['indicators']) > 0

        return self.results

# Example usage
if __name__ == "__main__":
    detector = MalwareDetector("/path/to/suspicious.exe")
    results = detector.analyze(yara_rules="/path/to/malware_rules.yar")

    print(f"File: {results['file_name']}")
    print(f"Suspicious: {results['is_suspicious']}")
    print("Indicators:")
    for indicator in results['indicators']:
        print(f"  - {indicator}")
